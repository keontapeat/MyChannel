rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    match /videos/{videoId} {
      allow read: if true;
      allow write: if request.auth != null; // refine by ownership in production
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Videos: readable by anyone; writes only by fully signed-in users (not anonymous)
    match /videos/{videoId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.token.sign_in_provider != 'anonymous' && request.resource.data.creatorId == request.auth.uid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Comments can be read by anyone, created by authenticated users
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Analytics data - only authenticated users can write their own data
    match /analytics/{document=**} {
      allow read, write: if request.auth != null;
    }

    match /stories/{storyId} {
      allow read: if true;
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid &&
        (request.resource.data.items is list) &&
        request.resource.data.items.size() > 0 &&
        request.resource.data.createdAt <= request.time &&
        request.resource.data.expiresAt > request.time;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null &&
          request.resource.data.userId == request.auth.uid &&
          (request.resource.data.text is string) && request.resource.data.text.size() > 0 &&
          request.resource.data.createdAt <= request.time;
      }
    }
  }
}